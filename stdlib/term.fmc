def VAR: 0
def TYP: 1
def ALL: 2
def LAM: 3
def APP: 4
def BOX: 5
def PUT: 6
def DUP: 7
def UIT: 8
def NUM: 9
def OP1: 10
def OP2: 11
def ITE: 12
def CPY: 13
def SIG: 14
def PAR: 15
def FST: 16
def SND: 17
def PRJ: 18
def EQL: 19
def RFL: 20
def SYM: 21
def RWT: 22
def CST: 23
def SLF: 24
def NEW: 25
def USE: 26
def ANN: 27
def REF: 28

def Var: {index}                    [VAR, {t} (t index)]
def Typ:                            [TYP, {t} t]
def All: {body eras}                [ALL, {t} (t body eras)]
def Lam: {body eras}                [LAM, {t} (t body eras)]
def App: {func argm eras}           [APP, {t} (t func argm eras)]
def Box: {expr}                     [BOX, {t} (t expr)]
def Put: {expr}                     [PUT, {t} (t expr)]
def Dup: {name expr body}           [DUP, {t} (t name expr body)]
def UIT:                            [UIT, {t} t]
def Num: {numb}                     [NUM, {t} (t numb)]
def Op1: {func num0 num1}           [OP1, {t} (t func num0 num1)]
def Op2: {func num0 num1}           [OP2, {t} (t func num0 num1)]
def Ite: {cond pair}                [ITE, {t} (t cond pair)]
def Cpy: {name numb body}           [CPY, {t} (t name numb body)]
def Sig: {name typ0 typ1 eras}      [SIG, {t} (t name typ0 typ1 eras)]
def Par: {val0 val1 eras}           [PAR, {t} (t val0 val1 eras)]
def Fst: {pair eras}                [FST, {t} (t pair eras)]
def Snd: {pair eras}                [SND, {t} (t pair eras)]
def Prj: {nam0 nam1 pair body eras} [PRJ, {t} (t nam0 nam1 pair body eras)]
def Eql: {val0 val1}                [EQL, {t} (t val0 val1)]
def Rfl: {expr}                     [RFL, {t} (t expr)]
def Sym: {prof}                     [SYM, {t} (t prof)]
def Rwt: {prof name type expr}      [RWT, {t} (t prof name type expr)]
def Cst: {prof val0 val1}           [CST, {t} (t prof val0 val1)]
def Slf: {name type}                [SLF, {t} (t name type)]
def New: {type expr}                [NEW, {t} (t type expr)]
def Use: {expr}                     [USE, {t} (t expr)]
def Ann: {type expr}                [ANN, {t} (t type expr)]
def Ref: {name}                     [REF, {t} (t name)]

def Term.match: {term Var Typ All Lam App Box Put Dup UIT Num Op1 Op2 Ite Cpy Sig Par Fst Snd Prj Eql Rfl Sym Rwt Cst Slf New Use Ann Ref}
  get [tag, fields] = term
  cpy tag = tag
  (fields
  if |tag == 0|
  then: Var
  else: if |tag == 1|
  then: Typ
  else: if |tag == 2|
  then: All
  else: if |tag == 3|
  then: Lam
  else: if |tag == 4|
  then: App
  else: if |tag == 5|
  then: Box
  else: if |tag == 6|
  then: Put
  else: if |tag == 7|
  then: Dup
  else: if |tag == 8|
  then: UIT
  else: if |tag == 9|
  then: Num
  else: if |tag == 10|
  then: Op1
  else: if |tag == 11|
  then: Op2
  else: if |tag == 12|
  then: Ite
  else: if |tag == 13|
  then: Cpy
  else: if |tag == 14|
  then: Sig
  else: if |tag == 15|
  then: Par
  else: if |tag == 16|
  then: Fst
  else: if |tag == 17|
  then: Snd
  else: if |tag == 18|
  then: Prj
  else: if |tag == 19|
  then: Eql
  else: if |tag == 20|
  then: Rfl
  else: if |tag == 21|
  then: Sym
  else: if |tag == 22|
  then: Rwt
  else: if |tag == 23|
  then: Cst
  else: if |tag == 24|
  then: Slf
  else: if |tag == 25|
  then: New
  else: if |tag == 26|
  then: Use
  else: if |tag == 27|
  then: Ann
  else: Ref)

def Term.rec:
  (rec ~65536)

def Term.index.copy: (Nat.copy ~256)

def Term.ex:

  // Library functions
  dup to_string = Term.to_string
  //dup shift     = Term.shift
  //dup subst     = Term.subst
  //dup copy      = Term.copy
  //dup reduce    = Term.reduce

  //Example terms
  let TRUE  = (Lam (Lam (Var 0) 0) 0)
  # (to_string TRUE)

def term: Term.ex

def Term.copy:
  let call = {go term}
    let case_var = {indx} {go}
      cpy indx = indx
      [go, [(Var indx), (Var indx)]]
    let case_lam = {body} {go}
      get [go, bodys]   = (go body)
      get [body0, body1] = bodys
      [go, [(Lam body0), (Lam body1)]]
    let case_app = {func argm} {go}
      get [go, funcs]    = (go func)
      get [go, argms]    = (go argm)
      get [func0, func1] = funcs
      get [argm0, argm1] = argms
      [go, [(App func0 argm0), (App func1 argm1)]]
    let case_put = {expr} {go}
      get [go, exprs]    = (go expr)
      get [expr0, expr1] = exprs
      [go, [(Put expr0), (Put expr1)]]
    let case_dup = {expr body} {go}
      get [go, exprs]    = (go expr)
      get [go, bodys]    = (go body)
      get [expr0, expr1] = exprs
      get [body0, body1] = bodys
      [go, [(Dup expr0 body0), (Dup expr1 body1)]]
    (term case_var case_lam case_app case_put case_dup go)
  let stop = {term} [{x}x, term]
  dup func = (Term.rec #call #stop)
  # {term} (snd (func term))

def Term.subst:
//  dup shift = Term.shift
  dup copy  = Term.copy
  let call = {go inc depth val term}
    cpy depth = depth
    cpy inc   = inc
    let case_var = {indx} {go val}
      cpy indx = indx
      [go, if |indx == depth|
        then: (shift inc 0 val)
        else: (Var |indx - (if |indx > depth| [1,0])|)]
    let case_lam = {body} {go val}
      get [go, body] = (go |inc + 1| |depth + 1| val body)
      [go, (Lam body)]
    let case_app = {func argm} {go val}
      get [val0, val1] = (copy val)
      get [go, func]   = (go inc depth val0 func)
      get [go, argm]   = (go inc depth val1 argm)
      [go, (App func argm)]
    let case_put = {expr} {go val}
      get [go, expr] = (go inc depth val expr)
      [go, (Put expr)]
    let case_dup = {expr body} {go val}
      get [val0, val1] = (copy val)
      get [go, expr]   = (go depth val0 expr)
      get [go, body]   = (go |inc + 1| |depth + 1| val1 body)
      [go, (Dup expr body)]
    (term case_var case_lam case_app case_put case_dup go val)
  let stop = {term}
    [{x}x, term]
  dup func = (Term.rec #call #stop)
  # {depth val term}
    (snd (func 0 depth val term))

def Term.reduce:
  dup subst = Term.subst
  let apply = {go func argm}
    get [go, func] = (go func)
    let case_var = {indx}      {go x} [go, (App (Var indx) x)]
    let case_lam = {body}      {go x} (go (subst 0 x body))
    let case_app = {func argm} {go x} get [go, f] = (go (App func argm)) [go, (App f x)]
    let case_put = {expr}      {go x} get [go, f] = (go (Put expr))      [go, (App f x)]
    let case_dup = {expr body} {go x} get [go, f] = (go (Dup expr body)) [go, (App f x)]
    (func case_var case_lam case_app case_put case_dup go argm)
  let call = {go term}
    let case_var = {indx} {go}
      [go, (Var indx)]
    let case_lam = {body} {go}
      get [go, body] = (go body)
      [go, (Lam body)]
    let case_app = {func argm} {go}
      get [go, func] = (go func)
      get [go, argm] = (go argm)
      (apply go func argm)
    let case_put = {expr} {go}
      get [go, expr] = (go expr)
      [go, (Put expr)]
    let case_dup = {expr body} {go}
      get [go, expr] = (go expr)
      get [go, body] = (go body)
      [go, (Dup expr body)]
    (term case_var case_lam case_app case_put case_dup go)
  let stop = {term} [{x}x, term]
  dup func = (Term.rec #call #stop)
  # {term} (snd (func term))

//def Term.reduce:
  //let func = {self}
    //let call = {go term}
      //let case_lam = {body} {go}
        //[go, (Lam body)]
      //let case_app = {func argm} {go}
        //let case_lam   = {f_body}        {argm go} (go (f_body argm)) // ([x]a b) ~> [b/x]a
        //let case_app   = {f_func f_argm} {argm go} get [go, argm] = (go argm) [go, (App (App f_func f_argm) argm)]
        //let case_var   = {f_indx}        {argm go} get [go, argm] = (go argm) [go, (App (Var f_indx) argm)]
        //let case_dup   = {f_expr f_body} {argm go} (go (Dup f_expr (App f_body argm))) // ((dup x = a; b) c) ~> dup x = a; (b c)
        //let case_put   = {f_expr}        {argm go} get [go, argm] = (go argm) [go, (App (Put f_expr) argm)]
        //let case_clo   = {f_indx}        {argm go} get [go, argm] = (go argm) [go, (App (Clo f_indx) argm)]
        //get [go, func] = (go func)
        //(func case_lam case_app case_var case_dup case_put case_clo argm go)
      //let case_var = {indx} {go}
        //[go, (Var indx)]
      //let case_dup = {expr body} {go}
        //let case_lam   = {f_body}        {body go} [go, (Dup (Lam f_body) body)]
        //let case_app   = {f_func f_argm} {body go} [go, (Dup (App f_func f_argm) body)]
        //let case_var   = {f_indx}        {body go} [go, (Dup (Var f_indx) body)]
        //let case_dup   = {f_expr f_body} {body go} (go (Dup f_expr (Dup f_body body))) // [x = [y = a] b] c ~> [y = a] [x = b] c
        //let case_put   = {f_expr}        {body go} (go (body f_expr)) // (dup x = #a; b) ~> b[x <- a]
        //let case_clo   = {f_indx}        {body go} [go, (Dup (Clo f_indx) body)]
        //get [go, expr] = (go expr)
        //(expr case_lam case_app case_var case_dup case_put case_clo body go)
      //let case_put = {expr} {go}
        //dup expr = xpr
        //[go, (Put #(self expr))]
      //let case_clo = {expr} {go}
        //[go, (Clo expr)]
      //(term case_lam case_app case_var case_dup case_put case_clo go)
    //let stop = {term}
      //[{x}x, (Var 0)]
    //dup func = (Term.rec #call #stop)
    //# {term}
      //(snd (func term))
  //(func # (func # (func # (func # (func # (func # (func # (func #
  //(func # (func # (func # (func # (func # (func # (func # (func # # {x}x))))))))))))))))

def Term.to_string:
  let name = {indx}
    let char = (Num.box_byte ||indx % 26| + 97|)
    (List.cons char List.nil)
  let call = {go depth term}
    cpy depth = depth
    let case_var = {indx} {go}
      let text = List.nil
      let text = (List.concat text (name indx))
      [go, text]
    let case_typ = {go}
      let text = List.nil
      [go, text]
    let case_all = {body eras} {go}
      let text = List.nil
      [go, text]
    let case_lam = {body eras} {go}
      get [go, body] = (go |depth + 1| body)
      let text = List.nil
      let text = (List.concat text (to_chars "{"))
      let text = (List.concat text (name depth))
      let text = (List.concat text (to_chars "}"))
      let text = (List.concat text body)
      [go, text]
    let case_app = {func argm eras} {go}
      get [go, func] = (go depth func)
      get [go, argm] = (go depth argm)
      let text = List.nil
      let text = (List.concat text (to_chars "("))
      let text = (List.concat text func)
      let text = (List.concat text (to_chars " "))
      let text = (List.concat text argm)
      let text = (List.concat text (to_chars ")"))
      [go, text]
    let case_box = {expr} {go}
      let text = List.nil
      [go, text]
    let case_put = {expr} {go}
      get [go, expr] = (go depth expr)
      let text = List.nil
      let text = (List.concat text (to_chars "#"))
      let text = (List.concat text expr)
      [go, text]
    let case_dup = {expr body} {go}
      get [go, expr] = (go depth expr)
      get [go, body] = (go |depth + 1| body)
      let text = List.nil
      let text = (List.concat text (to_chars "dup {c"))
      let text = (List.concat text (name depth))
      let text = (List.concat text (to_chars "} = "))
      let text = (List.concat text expr)
      let text = (List.concat text (to_chars "; "))
      let text = (List.concat text body)
      [go, text]
    let case_uit = {go}
      let text = List.nil
      [go, text]
    let case_num = {numb} {go}
      let text = List.nil
      [go, text]
    let case_op1 = {func num0 num1} {go}
      let text = List.nil
      [go, text]
    let case_op2 = {func num0 num1} {go}
      let text = List.nil
      [go, text]
    let case_ite = {cond pair} {go}
      let text = List.nil
      [go, text]
    let case_cpy = {name numb body} {go}
      let text = List.nil
      [go, text]
    let case_sig = {name typ0 typ1 eras} {go}
      let text = List.nil
      [go, text]
    let case_par = {val0 val1 eras} {go}
      let text = List.nil
      [go, text]
    let case_fst = {pair eras} {go}
      let text = List.nil
      [go, text]
    let case_snd = {pair eras} {go}
      let text = List.nil
      [go, text]
    let case_prj = {nam0 nam1 pair body eras} {go}
      let text = List.nil
      [go, text]
    let case_eql = {val0 val1} {go}
      let text = List.nil
      [go, text]
    let case_rfl = {expr} {go}
      let text = List.nil
      [go, text]
    let case_sym = {prof} {go}
      let text = List.nil
      [go, text]
    let case_rwt = {prof name type expr} {go}
      let text = List.nil
      [go, text]
    let case_cst = {prof val0 val1} {go}
      let text = List.nil
      [go, text]
    let case_slf = {name type} {go}
      let text = List.nil
      [go, text]
    let case_new = {type expr} {go}
      let text = List.nil
      [go, text]
    let case_use = {type expr} {go}
      let text = List.nil
      [go, text]
    let case_ann = {type expr} {go}
      let text = List.nil
      [go, text]
    let case_ref = {type expr} {go}
      let text = List.nil
      [go, text]
    (Term.match term case_var case_typ case_all case_lam case_app case_box case_put case_dup case_uit case_num case_op1 case_op2 case_ite case_cpy case_sig case_par case_fst case_snd case_prj case_eql case_rfl case_sym case_rwt case_cst case_slf case_new case_use case_ann case_ref go)
  let stop = {depth term} [{x}x, term]
  dup func = (Term.rec #call #stop)
  # {term} (from_chars (snd (func 0 term)))

def Term.shift:
  let call = {go inc depth term}
    cpy inc = inc
    cpy depth = depth

    let case_var = {indx} {go}
      cpy indx = indx
      let indx = if |indx < depth| [indx, |indx + inc|]
      [go, (Var indx)]
    let case_typ = {go} [go, Typ]

    let case_all = {body eras} {go}
      get [go, body] = (go inc |depth + 1| body)
      [go, (All body eras)]
    let case_lam = {body eras} {go}
      get [go, body] = (go inc |depth + 1| body)
      [go, (Lam body eras)]
    let case_app = {func argm eras} {go}
      get [go, func] = (go inc depth func)
      get [go, argm] = (go inc depth argm)
      [go, (App func argm eras)]

    let case_box = {expr} {go}
      get [go, expr] = (go inc depth expr)
      [go, (Box expr)]
    let case_put = {expr} {go}
      get [go, expr] = (go inc depth expr)
      [go, (Put expr)]
    let case_dup = {expr body} {go}
      get [go, expr] = (go inc depth expr)
      get [go, body] = (go inc |depth + 1| body)
      [go, (Dup expr body)]

    let case_uit = {go} [go, UIT]
    let case_num = {numb} {go} [go, (Num numb)]
    let case_op1 = {func num0 num1} {go}
      get [go, num0] = (go inc depth num0)
      get [go, num1] = (go inc depth num0)
      [go, (Op1 func num0 num1)]
    let case_op2 = {func num0 num1} {go}
      get [go, num0] = (go inc depth num0)
      get [go, num1] = (go inc depth num0)
      [go, (Op2 func num0 num1)]

    let case_ite = {cond pair} {go}
      get [go, cond] = (go inc depth cond)
      get [go, pair] = (go inc depth pair)
      [go, (Ite cond pair)]
    let case_cpy = {name numb body} {go}
      get [go, numb] = (go inc depth numb)
      get [go, body] = (go inc |depth + 1| body)
      [go, (Cpy name numb body)]

    let case_sig = {name typ0 typ1 eras} {go}
      get [go, typ0] = (go inc depth typ0)
      get [go, typ1] = (go inc |depth + 1| typ1)
      [go, (Sig name typ0 typ1 eras)]
    let case_par = {val0 val1 eras} {go}
      get [go, val0] = (go inc depth val0)
      get [go, val1] = (go inc depth val1)
      [go, (Par val0 val1 eras)]
    let case_fst = {pair eras} {go}
      get [go, pair] = (go inc depth pair)
      [go, (Fst pair eras)]
    let case_snd = {pair eras} {go}
      get [go, pair] = (go inc depth pair)
      [go, (Snd pair eras)]
    let case_prj = {nam0 nam1 pair body eras} {go}
      get [go, pair] = (go inc depth pair)
      get [go, body] = (go inc |depth + 2| body)
      [go, (Prj nam0 nam1 pair body eras)]

    let case_eql = {val0 val1} {go}
      get [go, val0] = (go inc depth val0)
      get [go, val1] = (go inc depth val1)
      [go, (Eql val0 val1)]
    let case_rfl = {expr} {go}
      get [go, expr] = (go inc depth expr)
      [go, (Rfl expr)]
    let case_sym = {prof} {go}
      get [go, prof] = (go inc depth prof)
      [go, (Sym prof)]
    let case_rwt = {prof name type expr} {go}
      get [go, prof] = (go inc depth prof)
      get [go, type] = (go inc |depth + 1| type)
      get [go, expr] = (go inc depth expr)
      [go, (Rwt prof name type expr)]
    let case_cst = {prof val0 val1} {go}
      get [go, prof] = (go inc depth prof)
      get [go, val0] = (go inc depth val0)
      get [go, val1] = (go inc depth val1)
      [go, (Cst prof val0 val1)]

    let case_slf = {name type} {go}
      get [go, type] = (go inc |depth + 1| type)
      [go, (Slf name type)]
    let case_new = {type expr} {go}
      get [go, type] = (go inc depth type)
      get [go, expr] = (go inc depth expr)
      [go, (New type expr)]
    let case_use = {expr} {go}
      get [go, expr] = (go inc depth expr)
      [go, (Use expr)]

    let case_ann = {type expr} {go}
      get [go, type] = (go inc depth type)
      get [go, expr] = (go inc depth expr)
      [go, (Ann type expr done)]
    let case_ref = {name} {go}
      [go, (Ref name eras)]

    (Term.match term case_var case_typ case_all case_lam case_app case_box case_put case_dup case_uit case_num case_op1 case_op2 case_ite case_cpy case_sig case_par case_fst case_snd case_prj case_eql case_rfl case_sym case_rwt case_cst case_slf case_new case_use case_ann case_ref go)
  let stop = {inc depth term} [{x}x, term]
  dup func = (Term.rec #call #stop)
  # {inc depth term} (snd (func inc depth term))
