def LC.ex:

  // Library functions
  dup to_string = LC.to_string
  dup subst     = LC.subst
  dup reduce    = LC.reduce
  dup shifted   = LC.shifted
  let Var       = LC.Var
  let Lam       = LC.Lam
  let App       = LC.App

  //Example terms
  let N2   = (Lam (Lam (App (Var 1) (App (Var 1) (Var 0))))) // λs.λz.(s (s z))
  let MUL  = (Lam (Lam (Lam (App (Var 2) (App (Var 1) (Var 0)))))) // λa.λb.λs.(a (b s))
  let MUL2 = (App MUL N2)
  let N256 = (App MUL2 (App MUL2 (App MUL2 (App MUL2 (App MUL2 (App MUL2 (App MUL2 N2)))))))
  let NOT  = (Lam (Lam (Lam (App (App (Var 2) (Var 0)) (Var 1)))))
  let TRUE = (Lam (Lam (Var 1)))
  let MAIN = (App (App N256 NOT) TRUE)
  # (to_string (reduce MAIN))

// Lambda Calculus in Formality-Core
def LC.Var: {indx}      {Var Lam App} (Var indx)
def LC.Lam: {body}      {Var Lam App} (Lam body)
def LC.App: {func argm} {Var Lam App} (App func argm)

def LC.to_string:
  let name = {indx}
    let char = (Num.box_byte ||indx % 26| + 97|)
    (List.cons char List.nil)
  let call = {go depth term}
    cpy depth = depth
    let case_var = {indx} {go}
      let text = List.nil
      let text = (List.concat text (name indx))
      [go, text]
    let case_lam = {body} {go}
      get [go, body] = (go |depth + 1| body)
      let text = List.nil
      let text = (List.concat text (to_chars "{"))
      let text = (List.concat text (name depth))
      let text = (List.concat text (to_chars "}"))
      let text = (List.concat text body)
      [go, text]
    let case_app = {func argm} {go}
      get [go, func] = (go depth func)
      get [go, argm] = (go depth argm)
      let text = List.nil
      let text = (List.concat text (to_chars "("))
      let text = (List.concat text func)
      let text = (List.concat text (to_chars " "))
      let text = (List.concat text argm)
      let text = (List.concat text (to_chars ")"))
      [go, text]
    (term case_var case_lam case_app go)
  let stop = {term} [{x}x, term]
  dup func = (REC #call #stop)
  # {term} (from_chars (snd (func 0 term)))

def LC.shifted:
  let call = {go inc depth term}
    cpy depth = depth
    cpy inc   = inc
    let case_var = {indx} {go}
      cpy indx = indx
      [go, [(LC.Var indx), (LC.Var (if |indx < depth| [indx, |indx + inc|]))]]
    let case_lam = {body} {go}
      get [go, bodys]    = (go inc |depth + 1| body)
      get [body0, body1] = bodys
      [go, [(LC.Lam body0), (LC.Lam body1)]]
    let case_app = {func argm} {go}
      get [go, funcs]    = (go inc depth func)
      get [go, argms]    = (go inc depth argm)
      get [func0, func1] = funcs
      get [argm0, argm1] = argms
      [go, [(LC.App func0 argm0), (LC.App func1 argm1)]]
    (term case_var case_lam case_app go)
  let stop = {term} [{x}x, term]
  dup func = (REC #call #stop)
  # {inc depth term} (snd (func inc depth term))

def LC.subst:
  dup shifted = LC.shifted
  let call = {go inc depth val term}
    cpy depth = depth
    cpy inc   = inc
    let case_var = {indx} {go val}
      cpy indx = indx
      [go, (if |indx == depth|
        then: {val} (shifted inc 0 val)
        else: {val} [val, (LC.Var |indx - (if |indx > depth| [1,0])|)]
        val)]
    let case_lam = {body} {go val}
      get [go, val_body] = (go |inc + 1| |depth + 1| val body)
      get [val, body]    = val_body
      [go, [val, (LC.Lam body)]]
    let case_app = {func argm} {go val}
      get [go, val_func] = (go inc depth val func)
      get [val, func]    = val_func
      get [go, val_argm] = (go inc depth val argm)
      get [val, argm]    = val_argm
      [go, [val, (LC.App func argm)]]
    (term case_var case_lam case_app go val)
  let stop = {term}
    [{x}x, term]
  dup func = (REC #call #stop)
  # {depth val term}
    (snd (snd (func 0 depth val term)))

def LC.whnf:
  dup subst = LC.subst
  let apply = {go func argm}
    get [go, func] = (go func)
    let case_var = {indx}      {go x} [go, (LC.App (LC.Var indx) x)]
    let case_lam = {body}      {go x} (go (subst 0 x body))
    let case_app = {func argm} {go x} [go, (LC.App (LC.App func argm) x)]
    (func case_var case_lam case_app go argm)
  let call = {go term}
    let case_var = {indx} {go}
      [go, (LC.Var indx)]
    let case_lam = {body} {go}
      [go, (LC.Lam body)]
    let case_app = {func argm} {go}
      get [go, func] = (go func)
      get [go, argm] = (go argm)
      (apply go func argm)
    (term case_var case_lam case_app go)
  let stop = {term} [{x}x, term]
  dup func = (REC #call #stop)
  # {term} (snd (func term))

def LC.reduce:
  dup subst = LC.subst
  dup whnf  = LC.whnf
  let apply = {go func argm}
    get [go, func] = (go func)
    let case_var = {indx}      {go x} [go, (LC.App (LC.Var indx) x)]
    let case_lam = {body}      {go x} (go (subst 0 x body))
    let case_app = {func argm} {go x} get [go, f] = (go (LC.App func argm)) [go, (LC.App f x)]
    (func case_var case_lam case_app go argm)
  let call = {go term}
    let case_var = {indx} {go}
      [go, (LC.Var indx)]
    let case_lam = {body} {go}
      get [go, body] = (go body)
      [go, (LC.Lam body)]
    let case_app = {func argm} {go}
      get [go, func] = (go func)
      get [go, argm] = (go argm)
      (apply go func argm)
    (term case_var case_lam case_app go)
  let stop = {term} [{x}x, term]
  dup func = (REC #call #stop)
  # {term} (snd (func term))

def lambda_calculus:
  LC.ex
