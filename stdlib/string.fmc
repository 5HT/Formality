def TEXT: 1954047348

// String to utf-8 byte list (little endian)
def to_codepoints: {str}
  {Cons}
  dup Cons = Cons
  let loop_aux = {x h}
    cpy x = x
    (if |x > 0| then:
      {h i}
      cpy i = i
      (if |i == 0| then:
        if       |x < 0x80|                then: {h Cons x} (Cons x (h 0))
        else: if ||x > 0xc1| * |x < 0xe0|| then: {h Cons x} (h 1 {y} |x + |y << 8||)
        else: if ||x > 0xdf| * |x < 0xf0|| then: {h Cons x} (h 2 {y} |x + |y << 8||)
        else: if ||x > 0xef| * |x < 0xf5|| then: {h Cons x} (h 3 {y} |x + |y << 8||)
        else: "ERROR - Invalid character" // -> TODO: Make decent exception handling
      else:
        if |i == 1| then: {h Cons x} {k} (Cons (k x) (h 0))
        else:             {h Cons x} {k} (h |i - 1| {y} (k |x + |y << 8||))
      h Cons x)
    else: {h} h
    h)
  let loop = {c h i}
    cpy c = c
    (loop_aux ||c >>  0| & 0xFF| (loop_aux ||c >>  8| & 0xFF| (loop_aux ||c >> 16| & 0xFF| (loop_aux ||c >> 24| & 0xFF| h))) i)
  dup rec = (snd str #loop)
  #{Nil} (rec {i} Nil 0)


// Converts an UTF-8 string into a list of bytes
def to_chars: {str}
  {Cons}
  dup Cons = Cons
  let Cons-non-0 = {c}
    cpy c = c
    if |c > 0|
    then: (Cons c)
    else: {x} x
  dup f =
    let func = {c cs}
      cpy c = c
      let Cons-c0 = (Cons-non-0 ||c >>  0| & 0xFF|)
      let Cons-c1 = (Cons-non-0 ||c >>  8| & 0xFF|)
      let Cons-c2 = (Cons-non-0 ||c >> 16| & 0xFF|)
      let Cons-c3 = (Cons-non-0 ||c >> 24| & 0xFF|)
      (Cons-c0 (Cons-c1 (Cons-c2 (Cons-c3 cs))))
    (snd str #func)
  # {nil} (f nil)

// Converts a list of bytes back to an UTF-8 string
def from_chars: {chars}
  let nums =
    {Cons}
    dup Cons = Cons
    dup func =
      let loop = {c cont char indx}
        cpy indx = indx
        cpy char = ||char >> 8| | |c << 24||
        cpy done = ||indx % 4| == 3|
        let Cons-char =
          if done
          then: (Cons char)
          else: {x}x
        let next-char =
          if done
          then: 0
          else: char
        (Cons-char (cont next-char |indx + 1|))
      (chars #loop)
    # {nil} (func {char indx}(Cons char nil) 0 0)
  [TEXT, nums]

def string_concat: {a b}
  (from_chars (concat (to_chars a) (to_chars b)))
