def TEXT: 1954047348

// Converts a bytestring into an UTF-8 string (incorrect for some inputs)
def from_bytes_to_codepoints: {bytes}
  {Cons}
  dup Cons = Cons
  let loop = {x h i}
    cpy i = i
    cpy x = x
    (if |i == 0| then:
      if |x < 0x80| then: {h Cons x} (Cons x (h 0))
      else: if |x < 0xdf| then: {h Cons x} (h 1 x)
      else: if |x < 0xef| then: {h Cons x} (h 2 x)
      else: {h Cons x} (h 3 x)
    else: if |i == 1| then: {h Cons x} {k} (Cons |x + |k << 8|| (h 0))
    else: if |i == 2| then: {h Cons x} {k} (h 1 |x + |k << 8||)
    else: {h Cons x} {k} (h 2 |x + |k << 8||)
    h Cons x)
  dup rec = (bytes #loop)
  #{Nil} (rec {i} Nil 0)

// |x + |y << 8||
// |x + ||y + |z << 8|| << 8||
// |x + ||y + ||z + |w << 8|| << 8|| << 8||

def lel: (from_bytes_to_codepoints (to_chars "λ"))
def lel2: ((snd "中"))
def lel3: ((snd "λ"))
def lel4: ((to_chars "中"))
def lel5: ((to_chars "λ"))


// Converts an UTF-8 string into a list of bytes
def to_chars: {str}
  {Cons}
  dup Cons = Cons
  let Cons-non-0 = {c}
    cpy c = c
    if |c > 0|
    then: (Cons c)
    else: {x} x
  dup f =
    let func = {c cs}
      cpy c = c
      let Cons-c0 = (Cons-non-0 ||c >>  0| & 0xFF|)
      let Cons-c1 = (Cons-non-0 ||c >>  8| & 0xFF|)
      let Cons-c2 = (Cons-non-0 ||c >> 16| & 0xFF|)
      let Cons-c3 = (Cons-non-0 ||c >> 24| & 0xFF|)
      (Cons-c0 (Cons-c1 (Cons-c2 (Cons-c3 cs))))
    (snd str #func)
  # {nil} (f nil)

// Converts a list of bytes back to an UTF-8 string
def from_chars: {chars}
  let nums =
    {Cons}
    dup Cons = Cons
    dup func =
      let loop = {c cont char indx}
        cpy indx = indx
        cpy char = ||char >> 8| | |c << 24||
        cpy done = ||indx % 4| == 3|
        let Cons-char =
          if done
          then: (Cons char)
          else: {x}x
        let next-char =
          if done
          then: 0
          else: char
        (Cons-char (cont next-char |indx + 1|))
      (chars #loop)
    # {nil} (func {char indx}(Cons char nil) 0 0)
  [TEXT, nums]

def string_concat: {a b}
  (from_chars (concat (to_chars a) (to_chars b)))
